# Android ML Kit OCR - Ready-to-use Template

This repository template lets you quickly integrate *on-device OCR* using *Google ML Kit Text Recognition* in an Android app (Kotlin). Copy the files into an Android Studio project and run.

---

## Project structure (files included below)


Android-MLKit-OCR-Template/
├── README.md
├── SubmissionNotes.txt
├── app/
│   ├── build.gradle (module)
│   ├── src/main/AndroidManifest.xml
│   ├── src/main/java/com/example/ocrapp/MainActivity.kt
│   └── src/main/res/layout/activity_main.xml
└── build.gradle (project)


---

## build.gradle (project)

gradle
// build.gradle (Project-level)
buildscript {
    repositories {
        google()
        mavenCentral()
    }
}
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}


---

## app/build.gradle (module: app)

gradle
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.ocrapp'
    compileSdk 34

    defaultConfig {
        applicationId "com.example.ocrapp"
        minSdk 21
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    // ML Kit Text Recognition (on-device)
    implementation 'com.google.mlkit:text-recognition:16.0.0'

    // For image loading (optional)
    implementation 'io.coil-kt:coil:2.4.0'
}


---

## AndroidManifest.xml

xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.ocrapp">

    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

    <application
        android:allowBackup="true"
        android:label="OCR App"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">
        <activity android:name="com.example.ocrapp.MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>
</manifest>


---

## activity_main.xml

xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <ImageView
        android:id="@+id/imageView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:scaleType="centerCrop"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintHeight_percent="0.5" />

    <Button
        android:id="@+id/btnPickImage"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Pick Image"
        app:layout_constraintTop_toBottomOf="@+id/imageView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="12dp"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp" />

    <Button
        android:id="@+id/btnCapture"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="Capture Photo"
        app:layout_constraintTop_toBottomOf="@+id/btnPickImage"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="8dp"
        android:layout_marginStart="16dp"
        android:layout_marginEnd="16dp" />

    <ScrollView
        android:id="@+id/scroll"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@+id/btnCapture"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        android:layout_marginTop="12dp"
        android:layout_marginStart="12dp"
        android:layout_marginEnd="12dp">

        <TextView
            android:id="@+id/tvResult"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Recognized text will appear here"
            android:textSize="16sp" />
    </ScrollView>

</androidx.constraintlayout.widget.ConstraintLayout>


---

## MainActivity.kt

kotlin
package com.example.ocrapp

import android.app.Activity
import android.content.Intent
import android.graphics.Bitmap
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.MediaStore
import android.widget.Button
import android.widget.ImageView
import android.widget.TextView
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.common.InputImage
import com.google.mlkit.vision.text.TextRecognition
import com.google.mlkit.vision.text.latin.TextRecognizerOptions
import java.io.IOException

class MainActivity : AppCompatActivity() {

    private lateinit var imageView: ImageView
    private lateinit var btnPickImage: Button
    private lateinit var btnCapture: Button
    private lateinit var tvResult: TextView

    private val pickImageLauncher = registerForActivityResult(
        ActivityResultContracts.GetContent()
    ) { uri: Uri? ->
        uri?.let { handleImageUri(it) }
    }

    private val takePictureLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            val bmp = result.data?.extras?.get("data") as? Bitmap
            bmp?.let { processBitmap(it) }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        imageView = findViewById(R.id.imageView)
        btnPickImage = findViewById(R.id.btnPickImage)
        btnCapture = findViewById(R.id.btnCapture)
        tvResult = findViewById(R.id.tvResult)

        btnPickImage.setOnClickListener {
            pickImageLauncher.launch("image/*")
        }

        btnCapture.setOnClickListener {
            val takePicture = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
            takePictureLauncher.launch(takePicture)
        }

        // request permission at runtime if needed (simple flow)
        requestPermissionsIfNeeded()
    }

    private fun requestPermissionsIfNeeded() {
        val permissions = mutableListOf<String>()
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.CAMERA) !=
            android.content.pm.PackageManager.PERMISSION_GRANTED) {
            permissions.add(android.Manifest.permission.CAMERA)
        }
        if (permissions.isNotEmpty()) {
            ActivityCompat.requestPermissions(this, permissions.toTypedArray(), 0)
        }
    }

    private fun handleImageUri(uri: Uri) {
        try {
            val bmp = if (Build.VERSION.SDK_INT < 28) {
                @Suppress("DEPRECATION")
                MediaStore.Images.Media.getBitmap(this.contentResolver, uri)
            } else {
                val source = androidx.core.content.FileProvider.getUriForFile(this, "$packageName.fileprovider", java.io.File(uri.path ?: ""))
                MediaStore.Images.Media.getBitmap(this.contentResolver, uri)
            }
            processBitmap(bmp)
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    private fun processBitmap(bitmap: Bitmap) {
        imageView.setImageBitmap(bitmap)
        tvResult.text = "Processing..."

        val image = InputImage.fromBitmap(bitmap, 0)
        val recognizer = TextRecognition.getClient(TextRecognizerOptions.DEFAULT_OPTIONS)

        recognizer.process(image)
            .addOnSuccessListener { visionText ->
                tvResult.text = visionText.text.ifEmpty { "No text recognized" }
            }
            .addOnFailureListener { e ->
                tvResult.text = "Error: ${e.localizedMessage}"
            }
    }
}


---
